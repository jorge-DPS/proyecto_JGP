# Generated by Django 3.0 on 2022-10-04 20:54

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import jsonfield.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('empresa', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='Username')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists.'}, max_length=140, unique=True, verbose_name='Correo electónico')),
                ('code', models.IntegerField(blank=True, error_messages={'unique': 'A user with that user code already exists.'}, null=True, unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Código de usuario')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nombres')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Apellidos')),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='profiles/%Y/%m/%d', verbose_name='Fotografia')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='fecha de nacimiento')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Telefono/Celular')),
                ('incorporation_date', models.DateField(blank=True, null=True, verbose_name='fecha de incorporación a la empresa')),
                ('lang', models.CharField(blank=True, choices=[('es', 'Spanish'), ('en', 'English')], default='es', max_length=7, null=True, verbose_name='Language')),
                ('branch_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='empresa.Sucursal', verbose_name='Sucursal')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='empresa.Rol', verbose_name='Rol')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PhoneDevice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='UUID')),
                ('token', models.TextField(blank=True, null=True, verbose_name='Device ID')),
                ('platform', models.CharField(choices=[('android', 'Android'), ('ios', 'iOS'), ('web', 'Web')], max_length=10)),
                ('model_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Model Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Phone Device',
                'verbose_name_plural': 'Phone Devices',
                'db_table': 'phone_devices',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PendingAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('confirm_email', 'Confirm e-mail'), ('reset_password', 'Reset Password')], db_index=True, max_length=50)),
                ('token', models.CharField(db_index=True, default=uuid.uuid4, max_length=150)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('extra', jsonfield.fields.JSONField(blank=True, default=dict, help_text='This field changes according to the type of action', verbose_name='extra')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_actions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Pending Action',
                'verbose_name_plural': 'Pending Actions',
                'db_table': 'pending_actions',
            },
        ),
    ]
